@model ByteTest.Application.Dtos.CreateUpdateResumeDto

@{
  List<SelectListItem> selectList = new SelectList(Model.Degrees, "Id", "Name", null).ToList();
  selectList.Insert(0, new SelectListItem { Text = "Select one", Value = "" });
}

<h2>Update</h2>

<form id="formUpdate">
  <div class="form-horizontal">
    <h4>Resume</h4>
    <hr/>
    
     @Html.HiddenFor(model => model.Id)
    <div class="form-group">
      @Html.LabelFor(model => model.FirstName, "First Name", htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.LastName, "Last Name", htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Email, "Email", htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Mobile, "Mobile", htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control" } })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.DegreeId, "Degree", htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.DropDownList("DegreeId", selectList, htmlAttributes: new { @class = "form-control" })
      </div>
    </div>
    
    <div class="form-group">
      @Html.LabelFor(model => model.Cv, "CV", htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.TextBoxFor(m => m.Cv, new { type = "file", htmlAttributes = new { @class = "form-control" }, 
          accept = "application/msword, application/pdf, application/vnd.openxmlformats-officedocument.wordprocessingml.document" })
      </div>
    </div>
    
    @if (Model.CvFileName is not null)
    {
      <div class="form-group">
        @Html.LabelFor(model => model.CvFileName, "Uploaded CV", htmlAttributes: new { @class = "control-label" })
        <div class="col-md-10">
          <a href="/Resumes/GetCv/@Model.Id" target="_blank">
            @Html.DisplayFor(model => model.CvFileName)
          </a>
          <div>
            Uploading a new CV will overwrite the existing one
          </div>
        </div>
      </div>
    }

    <div class="form-group mt-3">
      <div class="col-md-offset-2 col-md-10">
        <button id="btnUpdate" class="btn btn-primary">Update</button>
      </div>
    </div>
  </div>
</form>

<script>
       
    $("#btnUpdate").click(function (event) {
        event.preventDefault();
   
        const id = $('#formUpdate').find('input[id="Id"]').val();
        
        $.ajax({
            type: "PUT",
            url: "/Resumes/Update/" + id,
            data: new FormData($("#formUpdate")[0]),
            processData: false,
            contentType: false,
            success: function (response) {
                $("#myModal").modal("hide");
                window.location.reload();
            },
            error: function (error) {
                alert(error.responseJSON.join("\n"));
            }

        })
    })
   
  </script>